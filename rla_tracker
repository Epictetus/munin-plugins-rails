pod=<<-POD

=head1 NAME
rl_tracker - Munin plugin to monitor the amount of get, put, post and delete requests from a
rails application log.

=head1 APPLICABLE SYSTEMS
All systems that have a rails application log.

=head1 CONFIGURATION
The request-log-analyzer gem has to be intalled.
Also the script has to be able to access the rails log file and tail.
This configuration section shows the defaults of the plugin:

  [rla_tracker]
  env.log_file '/path/to/production.log'
  user www-data
  command /usr/local/bin/ruby %c
  
Options
  env.lines 50000        # Number of lines to tail
  env.interval 300       # Munin interval in seconds

ln -s /usr/share/munin/plugins/rla_tracker /etc/munin/plugins/rla_tracker

=head1 INTERPRETATION
All HTTP methods are stacked so that the total equals the amount of requests processed per 5 minutes.

=head1 MAGIC MARKERS
  #%# family=auto
  #%# capabilities=autoconf

=head1 VERSION
1.0

=head1 BUGS
None known

=head1 AUTHOR
Bart ten Brinke - railsdoctors.com

=head1 LICENSE
MIT

POD

# Globals
INTERVAL        = ENV['interval'] ? ENV['interval'].to_i : 300
NUMBER_OF_LINES = ENV['lines'] || 50000
LOG_FILE        = ENV['log_file']
AFTER_TIME      = (Time.now - INTERVAL).strftime('%Y%m%d%H%M%S')

# Check if we can run this plugin on this system
def autoconf
  begin
    require 'rubygems'
    gem "request-log-analyzer", ">=1.1.6"
  rescue Exception => e
    puts "no (Gem not found: #{e})"
    exit 1
  end

  unless `echo "test" | tail 2>/dev/null`.include?("test")
    puts "no (tail command not found)"
    exit 1
  end
  
  puts "yes"
  exit 0
end

# Uptput the config
def config
  puts <<-CONFIG
graph_category App
graph_title railsdoctors.com
graph_vlabel requests / #{INTERVAL / 60} minutes
graph_info The amount of requests git g  on this application server.
 
get.label get
get.draw AREA
post.label post
post.draw STACK
put.label put
put.draw STACK
delete.label delete
delete.draw STACK
CONFIG
  exit 0
end

# Gather information
def run(file, debug = false)
  if file == "" || file.nil?
    $stderr.puts "Filepath unspecified. Exiting"
    exit 1  
  end
  
  puts "Processing the last #{NUMBER_OF_LINES} lines of #{file} which are less then #{INTERVAL} seconds old." if debug  
  
  status = `tail -n #{NUMBER_OF_LINES} #{file} | /usr/bin/request-log-analyzer - --after #{AFTER_TIME} -b 2>/dev/null`

  unless $?.success?
    $stderr.puts "failed executing request-log-analyzer. Is the gem path correct?"
    exit 1
  end
    
  status =~ /^GET\s+\|\s+(\d+).*$/
  puts "get.value #{$1 || 0}"

  status =~ /^POST\s+\|\s+(\d+).*$/
  puts "post.value #{$1 || 0}"

  status =~ /^PUT\s+\|\s+(\d+).*$/
  puts "put.value #{$1 || 0}"

  status =~ /^DELETE\s+\|\s+(\d+).*$/
  puts "delete.value #{$1 || 0}"
end

# Main
if ARGV[0] == "config"
  output_config
elsif ARGV[0] == "autoconf"
  autoconf
elsif ARGV[0] == "debug"
  run(LOG_FILE || ARGV[1], true)
else
  run(LOG_FILE || ARGV[0])
end